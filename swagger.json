{
  "openapi": "3.0.0",
  "info": {
    "title": "EcoGarden",
    "version": "v1",
    "description": "This is the API for the EcoGarden project from the Openclassrooms PHP/Symfony course."
  },
  "paths": {
    "/api/user": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "zip_code": {
                    "type": "string"
                  }
                },
                "required": [
                  "email",
                  "password"
                ],
                "anyOf": [
                  {
                    "required": [
                      "city"
                    ]
                  },
                  {
                    "required": [
                      "zip_code"
                    ]
                  }
                ],
                "description": "Either `city` or `zip_code` must be provided."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created!"
          },
          "400": {
            "description": "Invalid JSON or validation errors"
          }
        }
      }
    },
    "/api/auth": {
      "post": {
        "summary": "User login",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/admin/user/{id}": {
      "delete": {
        "summary": "Delete a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "zip_code": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated!"
          },
          "400": {
            "description": "Invalid JSON or validation errors"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/meteo/{city}": {
      "get": {
        "summary": "Get weather information for a city",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Use a city name or a French postal code",
        "parameters": [
          {
            "name": "city",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Can be a city name or a French postal code"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Weather information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Refer to [OpenWeatherMap API documentation](https://openweathermap.org/api)"
                }
              }
            }
          },
          "404": {
            "description": "City not found"
          }
        }
      }
    },
    "/api/meteo": {
      "get": {
        "summary": "Get weather information for the default city",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "description": "Uses the city or, if not provided, the zip_code of the authenticated user",
        "responses": {
          "200": {
            "description": "Weather information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Refer to [OpenWeatherMap API documentation](https://openweathermap.org/api)"
                }
              }
            }
          },
          "404": {
            "description": "City not found"
          }
        }
      }
    },
    "/api/conseil/{month}": {
      "get": {
        "summary": "Get advice for a selected month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of advices for the selected month"
          },
          "400": {
            "description": "Month must be between 1 and 12"
          },
          "404": {
            "description": "Month not found"
          },
          "500": {
            "description": "An error occurred while fetching the advices"
          }
        }
      }
    },
    "/api/conseil": {
      "get": {
        "summary": "Get advice for the current server's month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of advices for the current month"
          },
          "500": {
            "description": "An error occurred while fetching the advices"
          }
        }
      }
    },
    "/api/admin/conseil": {
      "post": {
        "summary": "Add a new advice",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "months": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 12
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Advice added"
          },
          "400": {
            "description": "Invalid data or month not existing"
          },
          "500": {
            "description": "An error occurred while saving the advice"
          }
        }
      }
    },
    "/api/admin/conseil/{id}": {
      "put": {
        "summary": "Update an existing advice",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  },
                  "months": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 12
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Advice updated"
          },
          "400": {
            "description": "No changes detected or invalid data"
          },
          "404": {
            "description": "Advice not found"
          },
          "500": {
            "description": "An error occurred while updating the advice"
          }
        }
      },
      "delete": {
        "summary": "Delete an advice",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Advice deleted"
          },
          "404": {
            "description": "Advice not found"
          },
          "500": {
            "description": "An error occurred while deleting the advice"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "password": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "zip_code": {
            "type": "string"
          }
        }
      },
      "Month": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "month_number": {
            "type": "integer"
          },
          "advice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Advice"
            }
          }
        }
      },
      "Advice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "months": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Month"
            }
          }
        }
      }
    }
  }
}